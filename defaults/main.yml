---
icinga2_install_path: /etc/icinga2
icinga2_shared_path: /usr/share/icinga2
icinga2_owner: icinga
icinga2_group: icinga
icinga2_enabled_features:
  - command
  - ido-mysql
  - syslog
  - graphite
  - api

icinga2_mysql_packages:
  - mysql
  - mysql-server
  - python3-PyMySQL
icinga2_mysql_root_password: vaultrootpassword
icinga2_mysql_user: icinga2_ido
icinga2_mysql_database: icinga2_ido
icinga2_mysql_database_host: localhost
icinga2_mysql_user_password: vaulticingaido2userpassword
icinga2_initial_schema_sql: /usr/share/icinga2-ido-mysql/schema/mysql.sql
icinga2_mysql_charset: latin1

icinga2_web_mysql_user: icinga2_web
icinga2_web_mysql_database: icinga2_web
icinga2_web_mysql_user_password: vaulticingaweb2userpassword
icinga2_web_install_path: /usr/share/icingaweb2
icinga2_web_config_path: /etc/icingaweb2
icinga2_web_server: apache
icinga2_web_owner: apache
icinga2_web_group: icingaweb2

icinga2_api_username: root
icinga2_api_password: apipassword

icinga2_graphite_download_url: https://github.com/icinga/icingaweb2-module-graphite
icinga2_graphite_version: v1.1.0
icinga2_graphite_owner: root
icinga2_graphite_group: icingaweb2
icinga2_graphite_install_dir: /opt/graphite
icinga2_graphite_conf_dir: "{{ icinga2_graphite_install_dir }}/conf"
icinga2_graphite_port: 8070
icinga2_graphite_migration_script_download_url: https://raw.githubusercontent.com/graphite-project/graphite-web/master/webapp/manage.py

icinga2_zone_master_endpoint_name: "master"

icinga2_mysql_monitoring_user: icinga2_monitoring
icinga2_mysql_monitoring_password: icinga2_monitoring_password

## Vars related to Nagios plugins located on Icinga2 master
icinga2_nagios_plugins_install_dir: /usr/lib64/nagios/plugins
icinga2_package_prerequisites:
  - smartmontools
  - perl
  - perl-App-cpanminus
  - perl-Module-Install
  - gcc
  - make

icinga2_check_ipmi_sensor_v3_version: 3.13
icinga2_check_ipmi_sensor_v3_download_url: https://github.com/thomas-krenn/check_ipmi_sensor_v3/archive/v{{ icinga2_check_ipmi_sensor_v3_version }}.tar.gz
##

icinga2_nagios_plugins_packages:
  - perl-utf8-all
  - nagios-plugins-all

icinga2_client_group: [] # override via group_vars or host_vars

icinga2_contacts_and_groups: |
  /**
   * The example user 'icingaadmin' and the example
   * group 'icingaadmins'.
   */

  object User "icingaadmin" {
    import "generic-user"

    display_name = "Icinga 2 Admin"
    groups = [ "icingaadmins" ]

    email = "icinga@localhost"
  }

  object UserGroup "icingaadmins" {
    display_name = "Icinga 2 Admin Group"
  }

# Custom commands
icinga2_custom_plugin_commands: |
  object CheckCommand "raid" { // Plugin name without 'check_' prefix
    command = [ PluginDir + "/check_raid/check_raid.sh" ]
  }
  object CheckCommand "ide_smart" { // Plugin name without 'check_' prefix
    command = [ "sudo", PluginDir + "/additional_plugins/check_ide_smart" ]

    arguments = {
      "-d" = {
        value = "$smart_disk$"
        description = "Select device DEVICE. Note: if the device is specified without this option, any further option will be ignored."
      }
    }

    vars.smart_disk = "/dev/sda"
  }
  object CheckCommand "smart_pl" { // Plugin name without 'check_' prefix
    command = [ "sudo", PluginDir + "/check_smart" ]
    
    arguments = {
      "-d" = {
        value = "$smart_disk$"
        description = "a physical block device to be SMART monitored"
      }
      "-i" = {
        value = "$smart_type$"
        description = "device's interface type (auto|ata|scsi|nvme|3ware,N|areca,N|hpt,L/M/N|cciss,N|megaraid,N)"
      }
    }

    vars.smart_disk = "/dev/sda"
    vars.smart_type = "sat"
  }
  object CheckCommand "ipmi_sensor" { // Plugin name without 'check_' prefix
    command = [ PluginDir + "/check_ipmi_sensor/check_ipmi_sensor" ]
    
    arguments = {
      "-H" = {
        value = "$ipmi_sensor_hostname$"
        description = "hostname or IP of the IPMI interface."
      }
      "-U" = {
        value = "$ipmi_sensor_username$"
        description = "IPMI username"
      }
      "-P" = {
        value = "$ipmi_sensor_password$"
        description = "IPMI password"
      }
      "-L" = {
        value = "$ipmi_sensor_privilege_level$"
        description = "IPMI privilege level"
      }
    }
  }

icinga2_client_vars_defaults: |
  vars.disks["disk /"] = {
    disk_partitions = "/"
  }
  vars.notification["mail"] = {
    groups = [ "icingaadmins" ]
  }

icinga2_services_defaults:
  - name: ping4
    type: simple
    definition: |
      import "generic-service"

      check_command = "ping4"
      assign where host.address
  - name: ping6
    type: simple
    definition: |
      import "generic-service"

      check_command = "ping6"

      assign where host.address6
  - name: ssh
    type: simple
    definition: |
      import "generic-service"

      check_command = "ssh"

      command_endpoint = host.vars.agent_endpoint
      assign where (host.address || host.address6) && host.vars.os == "Linux"
  - name: http_vhost
    type: array
    array_definition: config in host.vars.http_vhosts
    definition: |
      import "generic-service"

      check_command = "http"

      command_endpoint = host.vars.agent_endpoint

      assign where host.vars.http_enabled == true

      vars += config
  - name: disk
    type: array
    array_definition: config in host.vars.disks
    definition: |
      import "generic-service"

      check_command = "disk"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint

      vars += config
  - name: icinga
    type: simple
    definition: |
      import "generic-service"

      check_command = "icinga"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: load
    type: simple
    definition:
      import "generic-service"

      check_command = "load"

      /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */

      vars.backup_downtime = "02:00-03:00"

      command_endpoint = host.vars.agent_endpoint

      assign where host.vars.agent_endpoint
  - name: procs
    type: simple
    definition: |
      import "generic-service"

      check_command = "procs"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: swap
    type: simple
    definition: |
      import "generic-service"

      check_command = "swap"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.swap_enabled == true
  - name: users
    type: simple
    definition: |
      import "generic-service"

      check_command = "users"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: mysql
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.mysql_enabled == true || host.vars.mysql_password
      ignore where host.vars.mysql_disabled == true
  - name: mysql_health_slave_replication_lag
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql_health"

      command_endpoint = host.vars.agent_endpoint
      vars.mysql_health_mode = "slave-lag"
      assign where (host.vars.mysql_enabled == true && host.vars.mysql_slave_enabled == true) || (host.vars.mysql_health_password && host.vars.mysql_slave_enabled == true)
      ignore where host.vars.mysql_disabled == true
  - name: mysql_health_slave_io_running
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql_health"

      command_endpoint = host.vars.agent_endpoint
      vars.mysql_health_mode = "slave-io-running"
      assign where (host.vars.mysql_enabled == true && host.vars.mysql_slave_enabled == true) || (host.vars.mysql_health_password && host.vars.mysql_slave_enabled == true)
      ignore where host.vars.mysql_disabled == true
  - name: mysql_health_slave_sql_running
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql_health"

      command_endpoint = host.vars.agent_endpoint
      vars.mysql_health_mode = "slave-sql-running"
      assign where (host.vars.mysql_enabled == true && host.vars.mysql_slave_enabled == true) || (host.vars.mysql_health_password && host.vars.mysql_slave_enabled == true)
      ignore where host.vars.mysql_disabled == true
  - name: check_rbl
    type: array
    array_definition: config in host.vars.rbl_hostnames
    definition: |
      import "generic-service"

      check_command = "rbl"

      command_endpoint = host.vars.agent_endpoint

      assign where host.vars.agent_endpoint
      ignore where host.vars.rbl_disabled == true

      vars += config
  - name: check_raid
    type: simple
    definition: |
      check_command = "raid"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.raid_enabled == true
  - name: check_smart_pl
    type: array
    array_definition: config in host.vars.smart_devices
    definition: |
      check_command = "smart_pl"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.smart_enabled == true || host.vars.smart_devices

      vars += config
  - name: check_smart
    type: array
    array_definition: config in host.vars.smart_disks
    definition: |
      check_command = "ide_smart"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.smart_enabled == true || host.vars.smart_disks

      vars += config
  - name: ipmi_sensor
    type: simple
    definition: |
      check_command = "ipmi_sensor"

      assign where host.vars.ipmi_sensor_enabled == true
  - name: iostats
    type: array
    array_definition: config in host.vars.iostats_disks
    definition: |
      import "generic-service"

      check_command = "iostats"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint

      vars += config

icinga2_service_groups: |
  object ServiceGroup "raid" {
    display_name = "RAID Checks"

    assign where match("raid*", service.check_command)
  }
  object ServiceGroup "SMART" {
    display_name = "SMART Checks"

    assign where match("*smart*", service.check_command)
  }
  object ServiceGroup "IPMI" {
    display_name = "IPMI Sensor Checks"

    assign where match("*ipmi_sensor*", service.check_command)
  }
  object ServiceGroup "MySQL" {
    display_name = "MySQL Checks"

    assign where match("mysql", service.check_command)
  }
  object ServiceGroup "MySQL Slaves" {
    display_name = "MySQL Slave Checks"

    assign where match("mysql_health*", service.check_command)
  }
  object ServiceGroup "RBL" {
    display_name = "RBL Checks"

    assign where match("rbl*", service.check_command)
  }
  object ServiceGroup "load" {
    display_name = "Load Checks"

    assign where match("load*", service.check_command)
  }
  object ServiceGroup "iostats" {
    display_name = "IOstats Checks"

    assign where match("iostats*", service.check_command)
  }


icinga2_templates: |
  /*
   * Generic template examples.
   */


  /**
   * Provides default settings for hosts. By convention
   * all hosts should import this template.
   *
   * The CheckCommand object `hostalive` is provided by
   * the plugin check command templates.
   * Check the documentation for details.
   */
  template Host "generic-host" {
    max_check_attempts = 3
    check_interval = 1m
    retry_interval = 30s

    check_command = "hostalive"
  }

  /**
   * Provides default settings for services. By convention
   * all services should import this template.
   */
  template Service "generic-service" {
    max_check_attempts = 5
    check_interval = 1m
    retry_interval = 30s
  }

  /**
   * Provides default settings for users. By convention
   * all users should inherit from this template.
   */

  template User "generic-user" {

  }

  /**
   * Provides default settings for host notifications.
   * By convention all host notifications should import
   * this template.
   */
  template Notification "mail-host-notification" {
    command = "mail-host-notification"

    states = [ Up, Down ]
    types = [ Problem, Acknowledgement, Recovery, Custom,
              FlappingStart, FlappingEnd,
              DowntimeStart, DowntimeEnd, DowntimeRemoved ]

    vars += {
      // notification_icingaweb2url = "https://www.example.com/icingaweb2"
      // notification_from = "Icinga 2 Host Monitoring <icinga@example.com>"
      notification_logtosyslog = false
    }

    period = "24x7"
  }

  /**
   * Provides default settings for service notifications.
   * By convention all service notifications should import
   * this template.
   */
  template Notification "mail-service-notification" {
    command = "mail-service-notification"

    states = [ OK, Warning, Critical, Unknown ]
    types = [ Problem, Acknowledgement, Recovery, Custom,
              FlappingStart, FlappingEnd,
              DowntimeStart, DowntimeEnd, DowntimeRemoved ]

    vars += {
      // notification_icingaweb2url = "https://www.example.com/icingaweb2"
      // notification_from = "Icinga 2 Service Monitoring <icinga@example.com>"
      notification_logtosyslog = false
    }

    period = "24x7"
  }
...
