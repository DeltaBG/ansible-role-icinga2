---
icinga2_install_path: /etc/icinga2
icinga2_shared_path: /usr/share/icinga2
icinga2_owner: icinga
icinga2_group: icinga
icinga2_enabled_features:
  - command
  - ido-mysql
  - syslog
  - graphite
  - api

icinga2_mysql_packages:
  - mysql
  - mysql-server
  - python3-PyMySQL
icinga2_mysql_root_password: vaultrootpassword
icinga2_mysql_user: icinga2_ido
icinga2_mysql_database: icinga2_ido
icinga2_mysql_database_host: localhost
icinga2_mysql_user_password: vaulticingaido2userpassword
icinga2_initial_schema_sql: /usr/share/icinga2-ido-mysql/schema/mysql.sql
icinga2_mysql_charset: latin1

icinga2_web_mysql_user: icinga2_web
icinga2_web_mysql_database: icinga2_web
icinga2_web_mysql_user_password: vaulticingaweb2userpassword
icinga2_web_install_path: /usr/share/icingaweb2
icinga2_web_config_path: /etc/icingaweb2
icinga2_web_server: apache
icinga2_web_owner: apache
icinga2_web_group: icingaweb2

icinga2_api_username: root
icinga2_api_password: apipassword

icinga2_graphite_download_url: https://github.com/icinga/icingaweb2-module-graphite
icinga2_graphite_owner: root
icinga2_graphite_group: icingaweb2
icinga2_graphite_install_dir: /opt/graphite
icinga2_graphite_conf_dir: "{{ icinga2_graphite_install_dir }}/conf"
icinga2_graphite_port: 8070
icinga2_graphite_migration_script_download_url: https://raw.githubusercontent.com/graphite-project/graphite-web/master/webapp/manage.py

icinga2_zone_master_endpoint_name: "master"

icinga2_nagios_plugins_packages:
  - perl-utf8-all
  - nagios-plugins-all

icinga2_client_group: [] # override via group_vars or host_vars

# Custom commands
icinga2_custom_plugin_commands: |
  object CheckCommand "raid" { // Plugin name without 'check_' prefix
    command = [ PluginDir + "/check_raid/check_raid.sh" ]
  }
  object CheckCommand "ide_smart" { // Plugin name without 'check_' prefix
    command = [ "sudo", PluginDir + "/additional_plugins/check_ide_smart" ]

    arguments = {
      "-d" = {
        value = "$smart_disk$"
        description = "Select device DEVICE. Note: if the device is specified without this option, any further option will be ignored."
      }
    }

    vars.smart_disk = "/dev/sda"
  }

icinga2_client_vars_defaults: |
  vars.disks["disk /"] = {
    disk_partitions = "/"
  }
  vars.notification["mail"] = {
    groups = [ "icingaadmins" ]
  }

icinga2_services_defaults:
  - name: ping4
    type: simple
    definition: |
      import "generic-service"

      check_command = "ping4"
      assign where host.address
  - name: ping6
    type: simple
    definition: |
      import "generic-service"

      check_command = "ping6"

      assign where host.address6
  - name: ssh
    type: simple
    definition: |
      import "generic-service"

      check_command = "ssh"

      command_endpoint = host.vars.agent_endpoint
      assign where (host.address || host.address6) && host.vars.os == "Linux"
  - name: http_vhost
    type: array
    array_definition: config in host.vars.http_vhosts
    definition: |
      import "generic-service"

      check_command = "http"

      command_endpoint = host.vars.agent_endpoint

      assign where host.vars.http_enabled == true

      vars += config
  - name: disk
    type: array
    array_definition: config in host.vars.disks
    definition: |
      import "generic-service"

      check_command = "disk"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint

      vars += config
  - name: icinga
    type: simple
    definition: |
      import "generic-service"

      check_command = "icinga"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: load
    type: simple
    definition:
      import "generic-service"

      check_command = "load"

      /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */

      vars.backup_downtime = "02:00-03:00"

      command_endpoint = host.vars.agent_endpoint

      assign where host.vars.agent_endpoint
  - name: procs
    type: simple
    definition: |
      import "generic-service"

      check_command = "procs"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: swap
    type: simple
    definition: |
      import "generic-service"

      check_command = "swap"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.swap_enabled == true
  - name: users
    type: simple
    definition: |
      import "generic-service"

      check_command = "users"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: iostats
    type: simple
    definition: |
      import "generic-service"

      check_command = "iostats"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.agent_endpoint
  - name: mysql
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.mysql_enabled == true || host.vars.mysql_password
  - name: mysql_health_slave_replication_lag
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql_health"

      command_endpoint = host.vars.agent_endpoint
      vars.mysql_health_mode = "slave-lag"
      assign where (host.vars.mysql_enabled == true && host.vars.mysql_slave_enabled == true) || (host.vars.mysql_health_password && host.vars.mysql_slave_enabled == true)
  - name: mysql_health_slave_io_running
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql_health"

      command_endpoint = host.vars.agent_endpoint
      vars.mysql_health_mode = "slave-io-running"
      assign where (host.vars.mysql_enabled == true && host.vars.mysql_slave_enabled == true) || (host.vars.mysql_health_password && host.vars.mysql_slave_enabled == true)
  - name: mysql_health_slave_sql_running
    type: simple
    definition: |
      import "generic-service"

      check_command = "mysql_health"

      command_endpoint = host.vars.agent_endpoint
      vars.mysql_health_mode = "slave-sql-running"
      assign where (host.vars.mysql_enabled == true && host.vars.mysql_slave_enabled == true) || (host.vars.mysql_health_password && host.vars.mysql_slave_enabled == true)
  - name: check_rbl
    type: simple
    definition: |
      import "generic-service"

      check_command = "rbl"

      command_endpoint = host.vars.agent_endpoint

      assign where host.vars.rbl_enabled == true
  - name: check_raid
    type: simple
    definition: |
      check_command = "raid"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.raid_enabled == true || host.vars.rbl_hostname
  - name: check_smart
    type: array
    array_definition: config in host.vars.smart_disks
    definition: |
      check_command = "ide_smart"

      command_endpoint = host.vars.agent_endpoint
      assign where host.vars.smart_enabled == true || host.vars.smart_disks

      vars += config

icinga2_service_groups: |
  object ServiceGroup "raid" {
    display_name = "RAID Checks"

    assign where match("raid*", service.check_command)
  }
  object ServiceGroup "SMART" {
    display_name = "SMART Checks"

    assign where match("smart*", service.check_command)
  }
  object ServiceGroup "MySQL" {
    display_name = "MySQL Checks"

    assign where match("mysql*", service.check_command)
  }
  object ServiceGroup "MySQL Slaves" {
    display_name = "MySQL Slave Checks"

    assign where match("mysql_health*", service.check_command)
  }
  object ServiceGroup "load" {
    display_name = "Load Checks"

    assign where match("load*", service.check_command)
  }
  object ServiceGroup "iostats" {
    display_name = "IOstats Checks"

    assign where match("iostats*", service.check_command)
  }
...
